// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KakaKVRaftMessage.proto

#include <net/serialization/KakaKVRaftMessage.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kakakv {
namespace net {
namespace message {
constexpr RequestVoteMessage::RequestVoteMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidateid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , term_(uint64_t{0u})
  , lastlogindex_(uint64_t{0u})
  , lastlogterm_(uint64_t{0u}){}
struct RequestVoteMessageDefaultTypeInternal {
  constexpr RequestVoteMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestVoteMessageDefaultTypeInternal() {}
  union {
    RequestVoteMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestVoteMessageDefaultTypeInternal _RequestVoteMessage_default_instance_;
constexpr RequestVoteResponseMessage::RequestVoteResponseMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(uint64_t{0u})
  , votegranted_(false){}
struct RequestVoteResponseMessageDefaultTypeInternal {
  constexpr RequestVoteResponseMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestVoteResponseMessageDefaultTypeInternal() {}
  union {
    RequestVoteResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestVoteResponseMessageDefaultTypeInternal _RequestVoteResponseMessage_default_instance_;
constexpr AppendEntriesMessage_Entry::AppendEntriesMessage_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(uint64_t{0u})
  , term_(uint64_t{0u})
  , kind_(0)
{}
struct AppendEntriesMessage_EntryDefaultTypeInternal {
  constexpr AppendEntriesMessage_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendEntriesMessage_EntryDefaultTypeInternal() {}
  union {
    AppendEntriesMessage_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendEntriesMessage_EntryDefaultTypeInternal _AppendEntriesMessage_Entry_default_instance_;
constexpr AppendEntriesMessage::AppendEntriesMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entrylist_()
  , leaderid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , term_(uint64_t{0u})
  , prevlogindex_(uint64_t{0u})
  , prevlogterm_(uint64_t{0u})
  , leadercommit_(uint64_t{0u}){}
struct AppendEntriesMessageDefaultTypeInternal {
  constexpr AppendEntriesMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendEntriesMessageDefaultTypeInternal() {}
  union {
    AppendEntriesMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendEntriesMessageDefaultTypeInternal _AppendEntriesMessage_default_instance_;
constexpr AppendEntriesResponseMessage::AppendEntriesResponseMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(uint64_t{0u})
  , success_(false){}
struct AppendEntriesResponseMessageDefaultTypeInternal {
  constexpr AppendEntriesResponseMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendEntriesResponseMessageDefaultTypeInternal() {}
  union {
    AppendEntriesResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendEntriesResponseMessageDefaultTypeInternal _AppendEntriesResponseMessage_default_instance_;
}  // namespace message
}  // namespace net
}  // namespace kakakv
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_KakaKVRaftMessage_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_KakaKVRaftMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_KakaKVRaftMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_KakaKVRaftMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::RequestVoteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::RequestVoteMessage, term_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::RequestVoteMessage, candidateid_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::RequestVoteMessage, lastlogindex_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::RequestVoteMessage, lastlogterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::RequestVoteResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::RequestVoteResponseMessage, term_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::RequestVoteResponseMessage, votegranted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage_Entry, kind_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage_Entry, index_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage_Entry, term_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage_Entry, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage, term_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage, leaderid_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage, prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage, prevlogterm_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage, leadercommit_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesMessage, entrylist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesResponseMessage, term_),
  PROTOBUF_FIELD_OFFSET(::kakakv::net::message::AppendEntriesResponseMessage, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kakakv::net::message::RequestVoteMessage)},
  { 9, -1, sizeof(::kakakv::net::message::RequestVoteResponseMessage)},
  { 16, -1, sizeof(::kakakv::net::message::AppendEntriesMessage_Entry)},
  { 25, -1, sizeof(::kakakv::net::message::AppendEntriesMessage)},
  { 36, -1, sizeof(::kakakv::net::message::AppendEntriesResponseMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kakakv::net::message::_RequestVoteMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kakakv::net::message::_RequestVoteResponseMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kakakv::net::message::_AppendEntriesMessage_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kakakv::net::message::_AppendEntriesMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kakakv::net::message::_AppendEntriesResponseMessage_default_instance_),
};

const char descriptor_table_protodef_KakaKVRaftMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027KakaKVRaftMessage.proto\022\022kakakv.net.me"
  "ssage\"b\n\022RequestVoteMessage\022\014\n\004term\030\001 \001("
  "\004\022\023\n\013candidateId\030\002 \001(\t\022\024\n\014lastLogIndex\030\003"
  " \001(\004\022\023\n\013lastLogTerm\030\004 \001(\004\"\?\n\032RequestVote"
  "ResponseMessage\022\014\n\004term\030\001 \001(\004\022\023\n\013voteGra"
  "nted\030\002 \001(\010\"\327\002\n\024AppendEntriesMessage\022\014\n\004t"
  "erm\030\001 \001(\004\022\020\n\010leaderId\030\002 \001(\t\022\024\n\014prevLogIn"
  "dex\030\003 \001(\004\022\023\n\013prevLogTerm\030\004 \001(\004\022\024\n\014leader"
  "Commit\030\005 \001(\004\022A\n\tentryList\030\006 \003(\0132..kakakv"
  ".net.message.AppendEntriesMessage.Entry\032"
  "\232\001\n\005Entry\022A\n\004kind\030\001 \001(\01623.kakakv.net.mes"
  "sage.AppendEntriesMessage.Entry.Kind\022\r\n\005"
  "index\030\002 \001(\004\022\014\n\004term\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\""
  "#\n\004Kind\022\016\n\nGeneralLog\020\000\022\013\n\007NoOpLog\020\001\"=\n\034"
  "AppendEntriesResponseMessage\022\014\n\004term\030\001 \001"
  "(\004\022\017\n\007success\030\002 \001(\010b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_KakaKVRaftMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KakaKVRaftMessage_2eproto = {
  false, false, 627, descriptor_table_protodef_KakaKVRaftMessage_2eproto, "KakaKVRaftMessage.proto", 
  &descriptor_table_KakaKVRaftMessage_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_KakaKVRaftMessage_2eproto::offsets,
  file_level_metadata_KakaKVRaftMessage_2eproto, file_level_enum_descriptors_KakaKVRaftMessage_2eproto, file_level_service_descriptors_KakaKVRaftMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_KakaKVRaftMessage_2eproto_getter() {
  return &descriptor_table_KakaKVRaftMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_KakaKVRaftMessage_2eproto(&descriptor_table_KakaKVRaftMessage_2eproto);
namespace kakakv {
namespace net {
namespace message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppendEntriesMessage_Entry_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KakaKVRaftMessage_2eproto);
  return file_level_enum_descriptors_KakaKVRaftMessage_2eproto[0];
}
bool AppendEntriesMessage_Entry_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AppendEntriesMessage_Entry_Kind AppendEntriesMessage_Entry::GeneralLog;
constexpr AppendEntriesMessage_Entry_Kind AppendEntriesMessage_Entry::NoOpLog;
constexpr AppendEntriesMessage_Entry_Kind AppendEntriesMessage_Entry::Kind_MIN;
constexpr AppendEntriesMessage_Entry_Kind AppendEntriesMessage_Entry::Kind_MAX;
constexpr int AppendEntriesMessage_Entry::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class RequestVoteMessage::_Internal {
 public:
};

RequestVoteMessage::RequestVoteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kakakv.net.message.RequestVoteMessage)
}
RequestVoteMessage::RequestVoteMessage(const RequestVoteMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_candidateid().empty()) {
    candidateid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candidateid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:kakakv.net.message.RequestVoteMessage)
}

inline void RequestVoteMessage::SharedCtor() {
candidateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
}

RequestVoteMessage::~RequestVoteMessage() {
  // @@protoc_insertion_point(destructor:kakakv.net.message.RequestVoteMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestVoteMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  candidateid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestVoteMessage::ArenaDtor(void* object) {
  RequestVoteMessage* _this = reinterpret_cast< RequestVoteMessage* >(object);
  (void)_this;
}
void RequestVoteMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVoteMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestVoteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakakv.net.message.RequestVoteMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidateid_.ClearToEmpty();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string candidateId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_candidateid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kakakv.net.message.RequestVoteMessage.candidateId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lastLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lastlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lastLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lastlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoteMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kakakv.net.message.RequestVoteMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // string candidateId = 2;
  if (!this->_internal_candidateid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidateid().data(), static_cast<int>(this->_internal_candidateid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kakakv.net.message.RequestVoteMessage.candidateId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_candidateid(), target);
  }

  // uint64 lastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lastlogindex(), target);
  }

  // uint64 lastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lastlogterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakakv.net.message.RequestVoteMessage)
  return target;
}

size_t RequestVoteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakakv.net.message.RequestVoteMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidateId = 2;
  if (!this->_internal_candidateid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidateid());
  }

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_term());
  }

  // uint64 lastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastlogindex());
  }

  // uint64 lastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastlogterm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestVoteMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteMessage::GetClassData() const { return &_class_data_; }

void RequestVoteMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RequestVoteMessage *>(to)->MergeFrom(
      static_cast<const RequestVoteMessage &>(from));
}


void RequestVoteMessage::MergeFrom(const RequestVoteMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakakv.net.message.RequestVoteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_candidateid().empty()) {
    _internal_set_candidateid(from._internal_candidateid());
  }
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_lastlogindex() != 0) {
    _internal_set_lastlogindex(from._internal_lastlogindex());
  }
  if (from._internal_lastlogterm() != 0) {
    _internal_set_lastlogterm(from._internal_lastlogterm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteMessage::CopyFrom(const RequestVoteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakakv.net.message.RequestVoteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteMessage::IsInitialized() const {
  return true;
}

void RequestVoteMessage::InternalSwap(RequestVoteMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &candidateid_, GetArenaForAllocation(),
      &other->candidateid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteMessage, lastlogterm_)
      + sizeof(RequestVoteMessage::lastlogterm_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteMessage, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KakaKVRaftMessage_2eproto_getter, &descriptor_table_KakaKVRaftMessage_2eproto_once,
      file_level_metadata_KakaKVRaftMessage_2eproto[0]);
}

// ===================================================================

class RequestVoteResponseMessage::_Internal {
 public:
};

RequestVoteResponseMessage::RequestVoteResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kakakv.net.message.RequestVoteResponseMessage)
}
RequestVoteResponseMessage::RequestVoteResponseMessage(const RequestVoteResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&votegranted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  // @@protoc_insertion_point(copy_constructor:kakakv.net.message.RequestVoteResponseMessage)
}

inline void RequestVoteResponseMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&votegranted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
}

RequestVoteResponseMessage::~RequestVoteResponseMessage() {
  // @@protoc_insertion_point(destructor:kakakv.net.message.RequestVoteResponseMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestVoteResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestVoteResponseMessage::ArenaDtor(void* object) {
  RequestVoteResponseMessage* _this = reinterpret_cast< RequestVoteResponseMessage* >(object);
  (void)_this;
}
void RequestVoteResponseMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVoteResponseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestVoteResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakakv.net.message.RequestVoteResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votegranted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteResponseMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool voteGranted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          votegranted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoteResponseMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kakakv.net.message.RequestVoteResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // bool voteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_votegranted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakakv.net.message.RequestVoteResponseMessage)
  return target;
}

size_t RequestVoteResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakakv.net.message.RequestVoteResponseMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_term());
  }

  // bool voteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestVoteResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteResponseMessage::GetClassData() const { return &_class_data_; }

void RequestVoteResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RequestVoteResponseMessage *>(to)->MergeFrom(
      static_cast<const RequestVoteResponseMessage &>(from));
}


void RequestVoteResponseMessage::MergeFrom(const RequestVoteResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakakv.net.message.RequestVoteResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_votegranted() != 0) {
    _internal_set_votegranted(from._internal_votegranted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteResponseMessage::CopyFrom(const RequestVoteResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakakv.net.message.RequestVoteResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteResponseMessage::IsInitialized() const {
  return true;
}

void RequestVoteResponseMessage::InternalSwap(RequestVoteResponseMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteResponseMessage, votegranted_)
      + sizeof(RequestVoteResponseMessage::votegranted_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteResponseMessage, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteResponseMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KakaKVRaftMessage_2eproto_getter, &descriptor_table_KakaKVRaftMessage_2eproto_once,
      file_level_metadata_KakaKVRaftMessage_2eproto[1]);
}

// ===================================================================

class AppendEntriesMessage_Entry::_Internal {
 public:
};

AppendEntriesMessage_Entry::AppendEntriesMessage_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kakakv.net.message.AppendEntriesMessage.Entry)
}
AppendEntriesMessage_Entry::AppendEntriesMessage_Entry(const AppendEntriesMessage_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&index_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:kakakv.net.message.AppendEntriesMessage.Entry)
}

inline void AppendEntriesMessage_Entry::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&index_)) + sizeof(kind_));
}

AppendEntriesMessage_Entry::~AppendEntriesMessage_Entry() {
  // @@protoc_insertion_point(destructor:kakakv.net.message.AppendEntriesMessage.Entry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendEntriesMessage_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppendEntriesMessage_Entry::ArenaDtor(void* object) {
  AppendEntriesMessage_Entry* _this = reinterpret_cast< AppendEntriesMessage_Entry* >(object);
  (void)_this;
}
void AppendEntriesMessage_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesMessage_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEntriesMessage_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:kakakv.net.message.AppendEntriesMessage.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&index_)) + sizeof(kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesMessage_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kakakv.net.message.AppendEntriesMessage.Entry.Kind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::kakakv::net::message::AppendEntriesMessage_Entry_Kind>(val));
        } else goto handle_unusual;
        continue;
      // uint64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesMessage_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kakakv.net.message.AppendEntriesMessage.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kakakv.net.message.AppendEntriesMessage.Entry.Kind kind = 1;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // uint64 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_index(), target);
  }

  // uint64 term = 3;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_term(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakakv.net.message.AppendEntriesMessage.Entry)
  return target;
}

size_t AppendEntriesMessage_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakakv.net.message.AppendEntriesMessage.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 index = 2;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index());
  }

  // uint64 term = 3;
  if (this->_internal_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_term());
  }

  // .kakakv.net.message.AppendEntriesMessage.Entry.Kind kind = 1;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesMessage_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEntriesMessage_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesMessage_Entry::GetClassData() const { return &_class_data_; }

void AppendEntriesMessage_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppendEntriesMessage_Entry *>(to)->MergeFrom(
      static_cast<const AppendEntriesMessage_Entry &>(from));
}


void AppendEntriesMessage_Entry::MergeFrom(const AppendEntriesMessage_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakakv.net.message.AppendEntriesMessage.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesMessage_Entry::CopyFrom(const AppendEntriesMessage_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakakv.net.message.AppendEntriesMessage.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesMessage_Entry::IsInitialized() const {
  return true;
}

void AppendEntriesMessage_Entry::InternalSwap(AppendEntriesMessage_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesMessage_Entry, kind_)
      + sizeof(AppendEntriesMessage_Entry::kind_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesMessage_Entry, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesMessage_Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KakaKVRaftMessage_2eproto_getter, &descriptor_table_KakaKVRaftMessage_2eproto_once,
      file_level_metadata_KakaKVRaftMessage_2eproto[2]);
}

// ===================================================================

class AppendEntriesMessage::_Internal {
 public:
};

AppendEntriesMessage::AppendEntriesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entrylist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kakakv.net.message.AppendEntriesMessage)
}
AppendEntriesMessage::AppendEntriesMessage(const AppendEntriesMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entrylist_(from.entrylist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leaderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leaderid().empty()) {
    leaderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leaderid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&leadercommit_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
  // @@protoc_insertion_point(copy_constructor:kakakv.net.message.AppendEntriesMessage)
}

inline void AppendEntriesMessage::SharedCtor() {
leaderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leadercommit_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
}

AppendEntriesMessage::~AppendEntriesMessage() {
  // @@protoc_insertion_point(destructor:kakakv.net.message.AppendEntriesMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendEntriesMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  leaderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppendEntriesMessage::ArenaDtor(void* object) {
  AppendEntriesMessage* _this = reinterpret_cast< AppendEntriesMessage* >(object);
  (void)_this;
}
void AppendEntriesMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEntriesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakakv.net.message.AppendEntriesMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entrylist_.Clear();
  leaderid_.ClearToEmpty();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string leaderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_leaderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kakakv.net.message.AppendEntriesMessage.leaderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prevLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prevlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prevLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prevlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 leaderCommit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          leadercommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kakakv.net.message.AppendEntriesMessage.Entry entryList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entrylist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kakakv.net.message.AppendEntriesMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // string leaderId = 2;
  if (!this->_internal_leaderid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leaderid().data(), static_cast<int>(this->_internal_leaderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kakakv.net.message.AppendEntriesMessage.leaderId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leaderid(), target);
  }

  // uint64 prevLogIndex = 3;
  if (this->_internal_prevlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_prevlogindex(), target);
  }

  // uint64 prevLogTerm = 4;
  if (this->_internal_prevlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_prevlogterm(), target);
  }

  // uint64 leaderCommit = 5;
  if (this->_internal_leadercommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_leadercommit(), target);
  }

  // repeated .kakakv.net.message.AppendEntriesMessage.Entry entryList = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entrylist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_entrylist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakakv.net.message.AppendEntriesMessage)
  return target;
}

size_t AppendEntriesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakakv.net.message.AppendEntriesMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kakakv.net.message.AppendEntriesMessage.Entry entryList = 6;
  total_size += 1UL * this->_internal_entrylist_size();
  for (const auto& msg : this->entrylist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string leaderId = 2;
  if (!this->_internal_leaderid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leaderid());
  }

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_term());
  }

  // uint64 prevLogIndex = 3;
  if (this->_internal_prevlogindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prevlogindex());
  }

  // uint64 prevLogTerm = 4;
  if (this->_internal_prevlogterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prevlogterm());
  }

  // uint64 leaderCommit = 5;
  if (this->_internal_leadercommit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_leadercommit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEntriesMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesMessage::GetClassData() const { return &_class_data_; }

void AppendEntriesMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppendEntriesMessage *>(to)->MergeFrom(
      static_cast<const AppendEntriesMessage &>(from));
}


void AppendEntriesMessage::MergeFrom(const AppendEntriesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakakv.net.message.AppendEntriesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entrylist_.MergeFrom(from.entrylist_);
  if (!from._internal_leaderid().empty()) {
    _internal_set_leaderid(from._internal_leaderid());
  }
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_prevlogindex() != 0) {
    _internal_set_prevlogindex(from._internal_prevlogindex());
  }
  if (from._internal_prevlogterm() != 0) {
    _internal_set_prevlogterm(from._internal_prevlogterm());
  }
  if (from._internal_leadercommit() != 0) {
    _internal_set_leadercommit(from._internal_leadercommit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesMessage::CopyFrom(const AppendEntriesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakakv.net.message.AppendEntriesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesMessage::IsInitialized() const {
  return true;
}

void AppendEntriesMessage::InternalSwap(AppendEntriesMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entrylist_.InternalSwap(&other->entrylist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &leaderid_, GetArenaForAllocation(),
      &other->leaderid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesMessage, leadercommit_)
      + sizeof(AppendEntriesMessage::leadercommit_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesMessage, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KakaKVRaftMessage_2eproto_getter, &descriptor_table_KakaKVRaftMessage_2eproto_once,
      file_level_metadata_KakaKVRaftMessage_2eproto[3]);
}

// ===================================================================

class AppendEntriesResponseMessage::_Internal {
 public:
};

AppendEntriesResponseMessage::AppendEntriesResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kakakv.net.message.AppendEntriesResponseMessage)
}
AppendEntriesResponseMessage::AppendEntriesResponseMessage(const AppendEntriesResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:kakakv.net.message.AppendEntriesResponseMessage)
}

inline void AppendEntriesResponseMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
}

AppendEntriesResponseMessage::~AppendEntriesResponseMessage() {
  // @@protoc_insertion_point(destructor:kakakv.net.message.AppendEntriesResponseMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendEntriesResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesResponseMessage::ArenaDtor(void* object) {
  AppendEntriesResponseMessage* _this = reinterpret_cast< AppendEntriesResponseMessage* >(object);
  (void)_this;
}
void AppendEntriesResponseMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesResponseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEntriesResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakakv.net.message.AppendEntriesResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesResponseMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesResponseMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kakakv.net.message.AppendEntriesResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakakv.net.message.AppendEntriesResponseMessage)
  return target;
}

size_t AppendEntriesResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakakv.net.message.AppendEntriesResponseMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_term());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEntriesResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesResponseMessage::GetClassData() const { return &_class_data_; }

void AppendEntriesResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppendEntriesResponseMessage *>(to)->MergeFrom(
      static_cast<const AppendEntriesResponseMessage &>(from));
}


void AppendEntriesResponseMessage::MergeFrom(const AppendEntriesResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakakv.net.message.AppendEntriesResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesResponseMessage::CopyFrom(const AppendEntriesResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakakv.net.message.AppendEntriesResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponseMessage::IsInitialized() const {
  return true;
}

void AppendEntriesResponseMessage::InternalSwap(AppendEntriesResponseMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesResponseMessage, success_)
      + sizeof(AppendEntriesResponseMessage::success_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesResponseMessage, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesResponseMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KakaKVRaftMessage_2eproto_getter, &descriptor_table_KakaKVRaftMessage_2eproto_once,
      file_level_metadata_KakaKVRaftMessage_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace net
}  // namespace kakakv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kakakv::net::message::RequestVoteMessage* Arena::CreateMaybeMessage< ::kakakv::net::message::RequestVoteMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kakakv::net::message::RequestVoteMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::kakakv::net::message::RequestVoteResponseMessage* Arena::CreateMaybeMessage< ::kakakv::net::message::RequestVoteResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kakakv::net::message::RequestVoteResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::kakakv::net::message::AppendEntriesMessage_Entry* Arena::CreateMaybeMessage< ::kakakv::net::message::AppendEntriesMessage_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kakakv::net::message::AppendEntriesMessage_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::kakakv::net::message::AppendEntriesMessage* Arena::CreateMaybeMessage< ::kakakv::net::message::AppendEntriesMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kakakv::net::message::AppendEntriesMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::kakakv::net::message::AppendEntriesResponseMessage* Arena::CreateMaybeMessage< ::kakakv::net::message::AppendEntriesResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kakakv::net::message::AppendEntriesResponseMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
