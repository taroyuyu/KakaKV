// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KakaKVMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KakaKVMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KakaKVMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KakaKVMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KakaKVMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KakaKVMessage_2eproto;
namespace kakakv {
namespace service {
namespace net {
namespace message {
class FailureMessage;
struct FailureMessageDefaultTypeInternal;
extern FailureMessageDefaultTypeInternal _FailureMessage_default_instance_;
class GetCommandMessage;
struct GetCommandMessageDefaultTypeInternal;
extern GetCommandMessageDefaultTypeInternal _GetCommandMessage_default_instance_;
class GetCommandResponseMessage;
struct GetCommandResponseMessageDefaultTypeInternal;
extern GetCommandResponseMessageDefaultTypeInternal _GetCommandResponseMessage_default_instance_;
class RedirectMessage;
struct RedirectMessageDefaultTypeInternal;
extern RedirectMessageDefaultTypeInternal _RedirectMessage_default_instance_;
class SetCommandMessage;
struct SetCommandMessageDefaultTypeInternal;
extern SetCommandMessageDefaultTypeInternal _SetCommandMessage_default_instance_;
class SuccessMessage;
struct SuccessMessageDefaultTypeInternal;
extern SuccessMessageDefaultTypeInternal _SuccessMessage_default_instance_;
}  // namespace message
}  // namespace net
}  // namespace service
}  // namespace kakakv
PROTOBUF_NAMESPACE_OPEN
template<> ::kakakv::service::net::message::FailureMessage* Arena::CreateMaybeMessage<::kakakv::service::net::message::FailureMessage>(Arena*);
template<> ::kakakv::service::net::message::GetCommandMessage* Arena::CreateMaybeMessage<::kakakv::service::net::message::GetCommandMessage>(Arena*);
template<> ::kakakv::service::net::message::GetCommandResponseMessage* Arena::CreateMaybeMessage<::kakakv::service::net::message::GetCommandResponseMessage>(Arena*);
template<> ::kakakv::service::net::message::RedirectMessage* Arena::CreateMaybeMessage<::kakakv::service::net::message::RedirectMessage>(Arena*);
template<> ::kakakv::service::net::message::SetCommandMessage* Arena::CreateMaybeMessage<::kakakv::service::net::message::SetCommandMessage>(Arena*);
template<> ::kakakv::service::net::message::SuccessMessage* Arena::CreateMaybeMessage<::kakakv::service::net::message::SuccessMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kakakv {
namespace service {
namespace net {
namespace message {

// ===================================================================

class GetCommandMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kakakv.service.net.message.GetCommandMessage) */ {
 public:
  inline GetCommandMessage() : GetCommandMessage(nullptr) {}
  ~GetCommandMessage() override;
  explicit constexpr GetCommandMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCommandMessage(const GetCommandMessage& from);
  GetCommandMessage(GetCommandMessage&& from) noexcept
    : GetCommandMessage() {
    *this = ::std::move(from);
  }

  inline GetCommandMessage& operator=(const GetCommandMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCommandMessage& operator=(GetCommandMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCommandMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCommandMessage* internal_default_instance() {
    return reinterpret_cast<const GetCommandMessage*>(
               &_GetCommandMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetCommandMessage& a, GetCommandMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCommandMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCommandMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCommandMessage* New() const final {
    return new GetCommandMessage();
  }

  GetCommandMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCommandMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCommandMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCommandMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCommandMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kakakv.service.net.message.GetCommandMessage";
  }
  protected:
  explicit GetCommandMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:kakakv.service.net.message.GetCommandMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KakaKVMessage_2eproto;
};
// -------------------------------------------------------------------

class GetCommandResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kakakv.service.net.message.GetCommandResponseMessage) */ {
 public:
  inline GetCommandResponseMessage() : GetCommandResponseMessage(nullptr) {}
  ~GetCommandResponseMessage() override;
  explicit constexpr GetCommandResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCommandResponseMessage(const GetCommandResponseMessage& from);
  GetCommandResponseMessage(GetCommandResponseMessage&& from) noexcept
    : GetCommandResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetCommandResponseMessage& operator=(const GetCommandResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCommandResponseMessage& operator=(GetCommandResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCommandResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCommandResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetCommandResponseMessage*>(
               &_GetCommandResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetCommandResponseMessage& a, GetCommandResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCommandResponseMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCommandResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCommandResponseMessage* New() const final {
    return new GetCommandResponseMessage();
  }

  GetCommandResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCommandResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCommandResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCommandResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCommandResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kakakv.service.net.message.GetCommandResponseMessage";
  }
  protected:
  explicit GetCommandResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kFoundFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kakakv.service.net.message.GetCommandResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KakaKVMessage_2eproto;
};
// -------------------------------------------------------------------

class SetCommandMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kakakv.service.net.message.SetCommandMessage) */ {
 public:
  inline SetCommandMessage() : SetCommandMessage(nullptr) {}
  ~SetCommandMessage() override;
  explicit constexpr SetCommandMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCommandMessage(const SetCommandMessage& from);
  SetCommandMessage(SetCommandMessage&& from) noexcept
    : SetCommandMessage() {
    *this = ::std::move(from);
  }

  inline SetCommandMessage& operator=(const SetCommandMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCommandMessage& operator=(SetCommandMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCommandMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCommandMessage* internal_default_instance() {
    return reinterpret_cast<const SetCommandMessage*>(
               &_SetCommandMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetCommandMessage& a, SetCommandMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCommandMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCommandMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCommandMessage* New() const final {
    return new SetCommandMessage();
  }

  SetCommandMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCommandMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCommandMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetCommandMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCommandMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kakakv.service.net.message.SetCommandMessage";
  }
  protected:
  explicit SetCommandMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredIdFieldNumber = 1,
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string requiredId = 1;
  void clear_requiredid();
  const std::string& requiredid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requiredid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requiredid();
  PROTOBUF_MUST_USE_RESULT std::string* release_requiredid();
  void set_allocated_requiredid(std::string* requiredid);
  private:
  const std::string& _internal_requiredid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requiredid(const std::string& value);
  std::string* _internal_mutable_requiredid();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:kakakv.service.net.message.SetCommandMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requiredid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KakaKVMessage_2eproto;
};
// -------------------------------------------------------------------

class RedirectMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kakakv.service.net.message.RedirectMessage) */ {
 public:
  inline RedirectMessage() : RedirectMessage(nullptr) {}
  ~RedirectMessage() override;
  explicit constexpr RedirectMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectMessage(const RedirectMessage& from);
  RedirectMessage(RedirectMessage&& from) noexcept
    : RedirectMessage() {
    *this = ::std::move(from);
  }

  inline RedirectMessage& operator=(const RedirectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectMessage& operator=(RedirectMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RedirectMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectMessage* internal_default_instance() {
    return reinterpret_cast<const RedirectMessage*>(
               &_RedirectMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RedirectMessage& a, RedirectMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedirectMessage* New() const final {
    return new RedirectMessage();
  }

  RedirectMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedirectMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RedirectMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RedirectMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedirectMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kakakv.service.net.message.RedirectMessage";
  }
  protected:
  explicit RedirectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
  };
  // string leaderId = 1;
  void clear_leaderid();
  const std::string& leaderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leaderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leaderid();
  PROTOBUF_MUST_USE_RESULT std::string* release_leaderid();
  void set_allocated_leaderid(std::string* leaderid);
  private:
  const std::string& _internal_leaderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leaderid(const std::string& value);
  std::string* _internal_mutable_leaderid();
  public:

  // @@protoc_insertion_point(class_scope:kakakv.service.net.message.RedirectMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KakaKVMessage_2eproto;
};
// -------------------------------------------------------------------

class SuccessMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kakakv.service.net.message.SuccessMessage) */ {
 public:
  inline SuccessMessage() : SuccessMessage(nullptr) {}
  ~SuccessMessage() override;
  explicit constexpr SuccessMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuccessMessage(const SuccessMessage& from);
  SuccessMessage(SuccessMessage&& from) noexcept
    : SuccessMessage() {
    *this = ::std::move(from);
  }

  inline SuccessMessage& operator=(const SuccessMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuccessMessage& operator=(SuccessMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuccessMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuccessMessage* internal_default_instance() {
    return reinterpret_cast<const SuccessMessage*>(
               &_SuccessMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SuccessMessage& a, SuccessMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SuccessMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuccessMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuccessMessage* New() const final {
    return new SuccessMessage();
  }

  SuccessMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuccessMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SuccessMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SuccessMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuccessMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kakakv.service.net.message.SuccessMessage";
  }
  protected:
  explicit SuccessMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kakakv.service.net.message.SuccessMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KakaKVMessage_2eproto;
};
// -------------------------------------------------------------------

class FailureMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kakakv.service.net.message.FailureMessage) */ {
 public:
  inline FailureMessage() : FailureMessage(nullptr) {}
  ~FailureMessage() override;
  explicit constexpr FailureMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FailureMessage(const FailureMessage& from);
  FailureMessage(FailureMessage&& from) noexcept
    : FailureMessage() {
    *this = ::std::move(from);
  }

  inline FailureMessage& operator=(const FailureMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FailureMessage& operator=(FailureMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FailureMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FailureMessage* internal_default_instance() {
    return reinterpret_cast<const FailureMessage*>(
               &_FailureMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FailureMessage& a, FailureMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FailureMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FailureMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FailureMessage* New() const final {
    return new FailureMessage();
  }

  FailureMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FailureMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FailureMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FailureMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FailureMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kakakv.service.net.message.FailureMessage";
  }
  protected:
  explicit FailureMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 errorCode = 1;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kakakv.service.net.message.FailureMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KakaKVMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetCommandMessage

// string key = 1;
inline void GetCommandMessage::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& GetCommandMessage::key() const {
  // @@protoc_insertion_point(field_get:kakakv.service.net.message.GetCommandMessage.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCommandMessage::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kakakv.service.net.message.GetCommandMessage.key)
}
inline std::string* GetCommandMessage::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:kakakv.service.net.message.GetCommandMessage.key)
  return _s;
}
inline const std::string& GetCommandMessage::_internal_key() const {
  return key_.Get();
}
inline void GetCommandMessage::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCommandMessage::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCommandMessage::release_key() {
  // @@protoc_insertion_point(field_release:kakakv.service.net.message.GetCommandMessage.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCommandMessage::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kakakv.service.net.message.GetCommandMessage.key)
}

// -------------------------------------------------------------------

// GetCommandResponseMessage

// bool found = 1;
inline void GetCommandResponseMessage::clear_found() {
  found_ = false;
}
inline bool GetCommandResponseMessage::_internal_found() const {
  return found_;
}
inline bool GetCommandResponseMessage::found() const {
  // @@protoc_insertion_point(field_get:kakakv.service.net.message.GetCommandResponseMessage.found)
  return _internal_found();
}
inline void GetCommandResponseMessage::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void GetCommandResponseMessage::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:kakakv.service.net.message.GetCommandResponseMessage.found)
}

// bytes value = 2;
inline void GetCommandResponseMessage::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GetCommandResponseMessage::value() const {
  // @@protoc_insertion_point(field_get:kakakv.service.net.message.GetCommandResponseMessage.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCommandResponseMessage::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kakakv.service.net.message.GetCommandResponseMessage.value)
}
inline std::string* GetCommandResponseMessage::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:kakakv.service.net.message.GetCommandResponseMessage.value)
  return _s;
}
inline const std::string& GetCommandResponseMessage::_internal_value() const {
  return value_.Get();
}
inline void GetCommandResponseMessage::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCommandResponseMessage::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCommandResponseMessage::release_value() {
  // @@protoc_insertion_point(field_release:kakakv.service.net.message.GetCommandResponseMessage.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCommandResponseMessage::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kakakv.service.net.message.GetCommandResponseMessage.value)
}

// -------------------------------------------------------------------

// SetCommandMessage

// string requiredId = 1;
inline void SetCommandMessage::clear_requiredid() {
  requiredid_.ClearToEmpty();
}
inline const std::string& SetCommandMessage::requiredid() const {
  // @@protoc_insertion_point(field_get:kakakv.service.net.message.SetCommandMessage.requiredId)
  return _internal_requiredid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetCommandMessage::set_requiredid(ArgT0&& arg0, ArgT... args) {
 
 requiredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kakakv.service.net.message.SetCommandMessage.requiredId)
}
inline std::string* SetCommandMessage::mutable_requiredid() {
  std::string* _s = _internal_mutable_requiredid();
  // @@protoc_insertion_point(field_mutable:kakakv.service.net.message.SetCommandMessage.requiredId)
  return _s;
}
inline const std::string& SetCommandMessage::_internal_requiredid() const {
  return requiredid_.Get();
}
inline void SetCommandMessage::_internal_set_requiredid(const std::string& value) {
  
  requiredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetCommandMessage::_internal_mutable_requiredid() {
  
  return requiredid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetCommandMessage::release_requiredid() {
  // @@protoc_insertion_point(field_release:kakakv.service.net.message.SetCommandMessage.requiredId)
  return requiredid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetCommandMessage::set_allocated_requiredid(std::string* requiredid) {
  if (requiredid != nullptr) {
    
  } else {
    
  }
  requiredid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requiredid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kakakv.service.net.message.SetCommandMessage.requiredId)
}

// string key = 2;
inline void SetCommandMessage::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& SetCommandMessage::key() const {
  // @@protoc_insertion_point(field_get:kakakv.service.net.message.SetCommandMessage.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetCommandMessage::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kakakv.service.net.message.SetCommandMessage.key)
}
inline std::string* SetCommandMessage::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:kakakv.service.net.message.SetCommandMessage.key)
  return _s;
}
inline const std::string& SetCommandMessage::_internal_key() const {
  return key_.Get();
}
inline void SetCommandMessage::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetCommandMessage::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetCommandMessage::release_key() {
  // @@protoc_insertion_point(field_release:kakakv.service.net.message.SetCommandMessage.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetCommandMessage::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kakakv.service.net.message.SetCommandMessage.key)
}

// bytes value = 3;
inline void SetCommandMessage::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& SetCommandMessage::value() const {
  // @@protoc_insertion_point(field_get:kakakv.service.net.message.SetCommandMessage.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetCommandMessage::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kakakv.service.net.message.SetCommandMessage.value)
}
inline std::string* SetCommandMessage::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:kakakv.service.net.message.SetCommandMessage.value)
  return _s;
}
inline const std::string& SetCommandMessage::_internal_value() const {
  return value_.Get();
}
inline void SetCommandMessage::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetCommandMessage::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetCommandMessage::release_value() {
  // @@protoc_insertion_point(field_release:kakakv.service.net.message.SetCommandMessage.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetCommandMessage::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kakakv.service.net.message.SetCommandMessage.value)
}

// -------------------------------------------------------------------

// RedirectMessage

// string leaderId = 1;
inline void RedirectMessage::clear_leaderid() {
  leaderid_.ClearToEmpty();
}
inline const std::string& RedirectMessage::leaderid() const {
  // @@protoc_insertion_point(field_get:kakakv.service.net.message.RedirectMessage.leaderId)
  return _internal_leaderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RedirectMessage::set_leaderid(ArgT0&& arg0, ArgT... args) {
 
 leaderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kakakv.service.net.message.RedirectMessage.leaderId)
}
inline std::string* RedirectMessage::mutable_leaderid() {
  std::string* _s = _internal_mutable_leaderid();
  // @@protoc_insertion_point(field_mutable:kakakv.service.net.message.RedirectMessage.leaderId)
  return _s;
}
inline const std::string& RedirectMessage::_internal_leaderid() const {
  return leaderid_.Get();
}
inline void RedirectMessage::_internal_set_leaderid(const std::string& value) {
  
  leaderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RedirectMessage::_internal_mutable_leaderid() {
  
  return leaderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RedirectMessage::release_leaderid() {
  // @@protoc_insertion_point(field_release:kakakv.service.net.message.RedirectMessage.leaderId)
  return leaderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RedirectMessage::set_allocated_leaderid(std::string* leaderid) {
  if (leaderid != nullptr) {
    
  } else {
    
  }
  leaderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kakakv.service.net.message.RedirectMessage.leaderId)
}

// -------------------------------------------------------------------

// SuccessMessage

// -------------------------------------------------------------------

// FailureMessage

// uint32 errorCode = 1;
inline void FailureMessage::clear_errorcode() {
  errorcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FailureMessage::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FailureMessage::errorcode() const {
  // @@protoc_insertion_point(field_get:kakakv.service.net.message.FailureMessage.errorCode)
  return _internal_errorcode();
}
inline void FailureMessage::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errorcode_ = value;
}
inline void FailureMessage::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:kakakv.service.net.message.FailureMessage.errorCode)
}

// string message = 2;
inline void FailureMessage::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& FailureMessage::message() const {
  // @@protoc_insertion_point(field_get:kakakv.service.net.message.FailureMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FailureMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kakakv.service.net.message.FailureMessage.message)
}
inline std::string* FailureMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:kakakv.service.net.message.FailureMessage.message)
  return _s;
}
inline const std::string& FailureMessage::_internal_message() const {
  return message_.Get();
}
inline void FailureMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FailureMessage::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FailureMessage::release_message() {
  // @@protoc_insertion_point(field_release:kakakv.service.net.message.FailureMessage.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FailureMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kakakv.service.net.message.FailureMessage.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace net
}  // namespace service
}  // namespace kakakv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KakaKVMessage_2eproto
