// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KakaKVRaftMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KakaKVRaftMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KakaKVRaftMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KakaKVRaftMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KakaKVRaftMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KakaKVRaftMessage_2eproto;
namespace kakakv {
namespace net {
namespace message {
class AppendEntriesMessage;
struct AppendEntriesMessageDefaultTypeInternal;
extern AppendEntriesMessageDefaultTypeInternal _AppendEntriesMessage_default_instance_;
class AppendEntriesMessage_Entry;
struct AppendEntriesMessage_EntryDefaultTypeInternal;
extern AppendEntriesMessage_EntryDefaultTypeInternal _AppendEntriesMessage_Entry_default_instance_;
class AppendEntriesResponseMessage;
struct AppendEntriesResponseMessageDefaultTypeInternal;
extern AppendEntriesResponseMessageDefaultTypeInternal _AppendEntriesResponseMessage_default_instance_;
class RequestVoteMessage;
struct RequestVoteMessageDefaultTypeInternal;
extern RequestVoteMessageDefaultTypeInternal _RequestVoteMessage_default_instance_;
class RequestVoteResponseMessage;
struct RequestVoteResponseMessageDefaultTypeInternal;
extern RequestVoteResponseMessageDefaultTypeInternal _RequestVoteResponseMessage_default_instance_;
}  // namespace message
}  // namespace net
}  // namespace kakakv
PROTOBUF_NAMESPACE_OPEN
template<> ::kakakv::net::message::AppendEntriesMessage* Arena::CreateMaybeMessage<::kakakv::net::message::AppendEntriesMessage>(Arena*);
template<> ::kakakv::net::message::AppendEntriesMessage_Entry* Arena::CreateMaybeMessage<::kakakv::net::message::AppendEntriesMessage_Entry>(Arena*);
template<> ::kakakv::net::message::AppendEntriesResponseMessage* Arena::CreateMaybeMessage<::kakakv::net::message::AppendEntriesResponseMessage>(Arena*);
template<> ::kakakv::net::message::RequestVoteMessage* Arena::CreateMaybeMessage<::kakakv::net::message::RequestVoteMessage>(Arena*);
template<> ::kakakv::net::message::RequestVoteResponseMessage* Arena::CreateMaybeMessage<::kakakv::net::message::RequestVoteResponseMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kakakv {
namespace net {
namespace message {

enum AppendEntriesMessage_Entry_Kind : int {
  AppendEntriesMessage_Entry_Kind_GeneralLog = 0,
  AppendEntriesMessage_Entry_Kind_NoOpLog = 1,
  AppendEntriesMessage_Entry_Kind_AppendEntriesMessage_Entry_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AppendEntriesMessage_Entry_Kind_AppendEntriesMessage_Entry_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AppendEntriesMessage_Entry_Kind_IsValid(int value);
constexpr AppendEntriesMessage_Entry_Kind AppendEntriesMessage_Entry_Kind_Kind_MIN = AppendEntriesMessage_Entry_Kind_GeneralLog;
constexpr AppendEntriesMessage_Entry_Kind AppendEntriesMessage_Entry_Kind_Kind_MAX = AppendEntriesMessage_Entry_Kind_NoOpLog;
constexpr int AppendEntriesMessage_Entry_Kind_Kind_ARRAYSIZE = AppendEntriesMessage_Entry_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppendEntriesMessage_Entry_Kind_descriptor();
template<typename T>
inline const std::string& AppendEntriesMessage_Entry_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AppendEntriesMessage_Entry_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AppendEntriesMessage_Entry_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AppendEntriesMessage_Entry_Kind_descriptor(), enum_t_value);
}
inline bool AppendEntriesMessage_Entry_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AppendEntriesMessage_Entry_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AppendEntriesMessage_Entry_Kind>(
    AppendEntriesMessage_Entry_Kind_descriptor(), name, value);
}
// ===================================================================

class RequestVoteMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kakakv.net.message.RequestVoteMessage) */ {
 public:
  inline RequestVoteMessage() : RequestVoteMessage(nullptr) {}
  ~RequestVoteMessage() override;
  explicit constexpr RequestVoteMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteMessage(const RequestVoteMessage& from);
  RequestVoteMessage(RequestVoteMessage&& from) noexcept
    : RequestVoteMessage() {
    *this = ::std::move(from);
  }

  inline RequestVoteMessage& operator=(const RequestVoteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteMessage& operator=(RequestVoteMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteMessage* internal_default_instance() {
    return reinterpret_cast<const RequestVoteMessage*>(
               &_RequestVoteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVoteMessage& a, RequestVoteMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteMessage* New() const final {
    return new RequestVoteMessage();
  }

  RequestVoteMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVoteMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kakakv.net.message.RequestVoteMessage";
  }
  protected:
  explicit RequestVoteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateIdFieldNumber = 2,
    kTermFieldNumber = 1,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // string candidateId = 2;
  void clear_candidateid();
  const std::string& candidateid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candidateid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candidateid();
  PROTOBUF_MUST_USE_RESULT std::string* release_candidateid();
  void set_allocated_candidateid(std::string* candidateid);
  private:
  const std::string& _internal_candidateid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_candidateid(const std::string& value);
  std::string* _internal_mutable_candidateid();
  public:

  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lastLogIndex = 3;
  void clear_lastlogindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogindex() const;
  void set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastlogindex() const;
  void _internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lastLogTerm = 4;
  void clear_lastlogterm();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogterm() const;
  void set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastlogterm() const;
  void _internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kakakv.net.message.RequestVoteMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidateid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KakaKVRaftMessage_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kakakv.net.message.RequestVoteResponseMessage) */ {
 public:
  inline RequestVoteResponseMessage() : RequestVoteResponseMessage(nullptr) {}
  ~RequestVoteResponseMessage() override;
  explicit constexpr RequestVoteResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteResponseMessage(const RequestVoteResponseMessage& from);
  RequestVoteResponseMessage(RequestVoteResponseMessage&& from) noexcept
    : RequestVoteResponseMessage() {
    *this = ::std::move(from);
  }

  inline RequestVoteResponseMessage& operator=(const RequestVoteResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResponseMessage& operator=(RequestVoteResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteResponseMessage* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponseMessage*>(
               &_RequestVoteResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVoteResponseMessage& a, RequestVoteResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteResponseMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResponseMessage* New() const final {
    return new RequestVoteResponseMessage();
  }

  RequestVoteResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVoteResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kakakv.net.message.RequestVoteResponseMessage";
  }
  protected:
  explicit RequestVoteResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool voteGranted = 2;
  void clear_votegranted();
  bool votegranted() const;
  void set_votegranted(bool value);
  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kakakv.net.message.RequestVoteResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  bool votegranted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KakaKVRaftMessage_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesMessage_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kakakv.net.message.AppendEntriesMessage.Entry) */ {
 public:
  inline AppendEntriesMessage_Entry() : AppendEntriesMessage_Entry(nullptr) {}
  ~AppendEntriesMessage_Entry() override;
  explicit constexpr AppendEntriesMessage_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesMessage_Entry(const AppendEntriesMessage_Entry& from);
  AppendEntriesMessage_Entry(AppendEntriesMessage_Entry&& from) noexcept
    : AppendEntriesMessage_Entry() {
    *this = ::std::move(from);
  }

  inline AppendEntriesMessage_Entry& operator=(const AppendEntriesMessage_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesMessage_Entry& operator=(AppendEntriesMessage_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesMessage_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesMessage_Entry* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesMessage_Entry*>(
               &_AppendEntriesMessage_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppendEntriesMessage_Entry& a, AppendEntriesMessage_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesMessage_Entry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesMessage_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesMessage_Entry* New() const final {
    return new AppendEntriesMessage_Entry();
  }

  AppendEntriesMessage_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesMessage_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesMessage_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppendEntriesMessage_Entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesMessage_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kakakv.net.message.AppendEntriesMessage.Entry";
  }
  protected:
  explicit AppendEntriesMessage_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AppendEntriesMessage_Entry_Kind Kind;
  static constexpr Kind GeneralLog =
    AppendEntriesMessage_Entry_Kind_GeneralLog;
  static constexpr Kind NoOpLog =
    AppendEntriesMessage_Entry_Kind_NoOpLog;
  static inline bool Kind_IsValid(int value) {
    return AppendEntriesMessage_Entry_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    AppendEntriesMessage_Entry_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    AppendEntriesMessage_Entry_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    AppendEntriesMessage_Entry_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return AppendEntriesMessage_Entry_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return AppendEntriesMessage_Entry_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return AppendEntriesMessage_Entry_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kIndexFieldNumber = 2,
    kTermFieldNumber = 3,
    kKindFieldNumber = 1,
  };
  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 term = 3;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .kakakv.net.message.AppendEntriesMessage.Entry.Kind kind = 1;
  void clear_kind();
  ::kakakv::net::message::AppendEntriesMessage_Entry_Kind kind() const;
  void set_kind(::kakakv::net::message::AppendEntriesMessage_Entry_Kind value);
  private:
  ::kakakv::net::message::AppendEntriesMessage_Entry_Kind _internal_kind() const;
  void _internal_set_kind(::kakakv::net::message::AppendEntriesMessage_Entry_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:kakakv.net.message.AppendEntriesMessage.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  int kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KakaKVRaftMessage_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kakakv.net.message.AppendEntriesMessage) */ {
 public:
  inline AppendEntriesMessage() : AppendEntriesMessage(nullptr) {}
  ~AppendEntriesMessage() override;
  explicit constexpr AppendEntriesMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesMessage(const AppendEntriesMessage& from);
  AppendEntriesMessage(AppendEntriesMessage&& from) noexcept
    : AppendEntriesMessage() {
    *this = ::std::move(from);
  }

  inline AppendEntriesMessage& operator=(const AppendEntriesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesMessage& operator=(AppendEntriesMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesMessage* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesMessage*>(
               &_AppendEntriesMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppendEntriesMessage& a, AppendEntriesMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesMessage* New() const final {
    return new AppendEntriesMessage();
  }

  AppendEntriesMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppendEntriesMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kakakv.net.message.AppendEntriesMessage";
  }
  protected:
  explicit AppendEntriesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AppendEntriesMessage_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntryListFieldNumber = 6,
    kLeaderIdFieldNumber = 2,
    kTermFieldNumber = 1,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 5,
  };
  // repeated .kakakv.net.message.AppendEntriesMessage.Entry entryList = 6;
  int entrylist_size() const;
  private:
  int _internal_entrylist_size() const;
  public:
  void clear_entrylist();
  ::kakakv::net::message::AppendEntriesMessage_Entry* mutable_entrylist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kakakv::net::message::AppendEntriesMessage_Entry >*
      mutable_entrylist();
  private:
  const ::kakakv::net::message::AppendEntriesMessage_Entry& _internal_entrylist(int index) const;
  ::kakakv::net::message::AppendEntriesMessage_Entry* _internal_add_entrylist();
  public:
  const ::kakakv::net::message::AppendEntriesMessage_Entry& entrylist(int index) const;
  ::kakakv::net::message::AppendEntriesMessage_Entry* add_entrylist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kakakv::net::message::AppendEntriesMessage_Entry >&
      entrylist() const;

  // string leaderId = 2;
  void clear_leaderid();
  const std::string& leaderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leaderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leaderid();
  PROTOBUF_MUST_USE_RESULT std::string* release_leaderid();
  void set_allocated_leaderid(std::string* leaderid);
  private:
  const std::string& _internal_leaderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leaderid(const std::string& value);
  std::string* _internal_mutable_leaderid();
  public:

  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prevLogIndex = 3;
  void clear_prevlogindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogindex() const;
  void set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prevlogindex() const;
  void _internal_set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prevLogTerm = 4;
  void clear_prevlogterm();
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogterm() const;
  void set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prevlogterm() const;
  void _internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 leaderCommit = 5;
  void clear_leadercommit();
  ::PROTOBUF_NAMESPACE_ID::uint64 leadercommit() const;
  void set_leadercommit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_leadercommit() const;
  void _internal_set_leadercommit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kakakv.net.message.AppendEntriesMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kakakv::net::message::AppendEntriesMessage_Entry > entrylist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogterm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 leadercommit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KakaKVRaftMessage_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kakakv.net.message.AppendEntriesResponseMessage) */ {
 public:
  inline AppendEntriesResponseMessage() : AppendEntriesResponseMessage(nullptr) {}
  ~AppendEntriesResponseMessage() override;
  explicit constexpr AppendEntriesResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesResponseMessage(const AppendEntriesResponseMessage& from);
  AppendEntriesResponseMessage(AppendEntriesResponseMessage&& from) noexcept
    : AppendEntriesResponseMessage() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResponseMessage& operator=(const AppendEntriesResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResponseMessage& operator=(AppendEntriesResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesResponseMessage* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponseMessage*>(
               &_AppendEntriesResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AppendEntriesResponseMessage& a, AppendEntriesResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesResponseMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResponseMessage* New() const final {
    return new AppendEntriesResponseMessage();
  }

  AppendEntriesResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppendEntriesResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kakakv.net.message.AppendEntriesResponseMessage";
  }
  protected:
  explicit AppendEntriesResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kakakv.net.message.AppendEntriesResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KakaKVRaftMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoteMessage

// uint64 term = 1;
inline void RequestVoteMessage::clear_term() {
  term_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteMessage::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteMessage::term() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.RequestVoteMessage.term)
  return _internal_term();
}
inline void RequestVoteMessage::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void RequestVoteMessage::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.RequestVoteMessage.term)
}

// string candidateId = 2;
inline void RequestVoteMessage::clear_candidateid() {
  candidateid_.ClearToEmpty();
}
inline const std::string& RequestVoteMessage::candidateid() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.RequestVoteMessage.candidateId)
  return _internal_candidateid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestVoteMessage::set_candidateid(ArgT0&& arg0, ArgT... args) {
 
 candidateid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kakakv.net.message.RequestVoteMessage.candidateId)
}
inline std::string* RequestVoteMessage::mutable_candidateid() {
  std::string* _s = _internal_mutable_candidateid();
  // @@protoc_insertion_point(field_mutable:kakakv.net.message.RequestVoteMessage.candidateId)
  return _s;
}
inline const std::string& RequestVoteMessage::_internal_candidateid() const {
  return candidateid_.Get();
}
inline void RequestVoteMessage::_internal_set_candidateid(const std::string& value) {
  
  candidateid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestVoteMessage::_internal_mutable_candidateid() {
  
  return candidateid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestVoteMessage::release_candidateid() {
  // @@protoc_insertion_point(field_release:kakakv.net.message.RequestVoteMessage.candidateId)
  return candidateid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestVoteMessage::set_allocated_candidateid(std::string* candidateid) {
  if (candidateid != nullptr) {
    
  } else {
    
  }
  candidateid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidateid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kakakv.net.message.RequestVoteMessage.candidateId)
}

// uint64 lastLogIndex = 3;
inline void RequestVoteMessage::clear_lastlogindex() {
  lastlogindex_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteMessage::_internal_lastlogindex() const {
  return lastlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteMessage::lastlogindex() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.RequestVoteMessage.lastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVoteMessage::_internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lastlogindex_ = value;
}
inline void RequestVoteMessage::set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.RequestVoteMessage.lastLogIndex)
}

// uint64 lastLogTerm = 4;
inline void RequestVoteMessage::clear_lastlogterm() {
  lastlogterm_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteMessage::_internal_lastlogterm() const {
  return lastlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteMessage::lastlogterm() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.RequestVoteMessage.lastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVoteMessage::_internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lastlogterm_ = value;
}
inline void RequestVoteMessage::set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.RequestVoteMessage.lastLogTerm)
}

// -------------------------------------------------------------------

// RequestVoteResponseMessage

// uint64 term = 1;
inline void RequestVoteResponseMessage::clear_term() {
  term_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteResponseMessage::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteResponseMessage::term() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.RequestVoteResponseMessage.term)
  return _internal_term();
}
inline void RequestVoteResponseMessage::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void RequestVoteResponseMessage::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.RequestVoteResponseMessage.term)
}

// bool voteGranted = 2;
inline void RequestVoteResponseMessage::clear_votegranted() {
  votegranted_ = false;
}
inline bool RequestVoteResponseMessage::_internal_votegranted() const {
  return votegranted_;
}
inline bool RequestVoteResponseMessage::votegranted() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.RequestVoteResponseMessage.voteGranted)
  return _internal_votegranted();
}
inline void RequestVoteResponseMessage::_internal_set_votegranted(bool value) {
  
  votegranted_ = value;
}
inline void RequestVoteResponseMessage::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.RequestVoteResponseMessage.voteGranted)
}

// -------------------------------------------------------------------

// AppendEntriesMessage_Entry

// .kakakv.net.message.AppendEntriesMessage.Entry.Kind kind = 1;
inline void AppendEntriesMessage_Entry::clear_kind() {
  kind_ = 0;
}
inline ::kakakv::net::message::AppendEntriesMessage_Entry_Kind AppendEntriesMessage_Entry::_internal_kind() const {
  return static_cast< ::kakakv::net::message::AppendEntriesMessage_Entry_Kind >(kind_);
}
inline ::kakakv::net::message::AppendEntriesMessage_Entry_Kind AppendEntriesMessage_Entry::kind() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesMessage.Entry.kind)
  return _internal_kind();
}
inline void AppendEntriesMessage_Entry::_internal_set_kind(::kakakv::net::message::AppendEntriesMessage_Entry_Kind value) {
  
  kind_ = value;
}
inline void AppendEntriesMessage_Entry::set_kind(::kakakv::net::message::AppendEntriesMessage_Entry_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.AppendEntriesMessage.Entry.kind)
}

// uint64 index = 2;
inline void AppendEntriesMessage_Entry::clear_index() {
  index_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage_Entry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage_Entry::index() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesMessage.Entry.index)
  return _internal_index();
}
inline void AppendEntriesMessage_Entry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void AppendEntriesMessage_Entry::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.AppendEntriesMessage.Entry.index)
}

// uint64 term = 3;
inline void AppendEntriesMessage_Entry::clear_term() {
  term_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage_Entry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage_Entry::term() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesMessage.Entry.term)
  return _internal_term();
}
inline void AppendEntriesMessage_Entry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void AppendEntriesMessage_Entry::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.AppendEntriesMessage.Entry.term)
}

// bytes data = 4;
inline void AppendEntriesMessage_Entry::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& AppendEntriesMessage_Entry::data() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesMessage.Entry.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppendEntriesMessage_Entry::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kakakv.net.message.AppendEntriesMessage.Entry.data)
}
inline std::string* AppendEntriesMessage_Entry::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:kakakv.net.message.AppendEntriesMessage.Entry.data)
  return _s;
}
inline const std::string& AppendEntriesMessage_Entry::_internal_data() const {
  return data_.Get();
}
inline void AppendEntriesMessage_Entry::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppendEntriesMessage_Entry::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppendEntriesMessage_Entry::release_data() {
  // @@protoc_insertion_point(field_release:kakakv.net.message.AppendEntriesMessage.Entry.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppendEntriesMessage_Entry::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kakakv.net.message.AppendEntriesMessage.Entry.data)
}

// -------------------------------------------------------------------

// AppendEntriesMessage

// uint64 term = 1;
inline void AppendEntriesMessage::clear_term() {
  term_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage::term() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesMessage.term)
  return _internal_term();
}
inline void AppendEntriesMessage::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void AppendEntriesMessage::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.AppendEntriesMessage.term)
}

// string leaderId = 2;
inline void AppendEntriesMessage::clear_leaderid() {
  leaderid_.ClearToEmpty();
}
inline const std::string& AppendEntriesMessage::leaderid() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesMessage.leaderId)
  return _internal_leaderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppendEntriesMessage::set_leaderid(ArgT0&& arg0, ArgT... args) {
 
 leaderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kakakv.net.message.AppendEntriesMessage.leaderId)
}
inline std::string* AppendEntriesMessage::mutable_leaderid() {
  std::string* _s = _internal_mutable_leaderid();
  // @@protoc_insertion_point(field_mutable:kakakv.net.message.AppendEntriesMessage.leaderId)
  return _s;
}
inline const std::string& AppendEntriesMessage::_internal_leaderid() const {
  return leaderid_.Get();
}
inline void AppendEntriesMessage::_internal_set_leaderid(const std::string& value) {
  
  leaderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppendEntriesMessage::_internal_mutable_leaderid() {
  
  return leaderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppendEntriesMessage::release_leaderid() {
  // @@protoc_insertion_point(field_release:kakakv.net.message.AppendEntriesMessage.leaderId)
  return leaderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppendEntriesMessage::set_allocated_leaderid(std::string* leaderid) {
  if (leaderid != nullptr) {
    
  } else {
    
  }
  leaderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kakakv.net.message.AppendEntriesMessage.leaderId)
}

// uint64 prevLogIndex = 3;
inline void AppendEntriesMessage::clear_prevlogindex() {
  prevlogindex_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage::_internal_prevlogindex() const {
  return prevlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage::prevlogindex() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesMessage.prevLogIndex)
  return _internal_prevlogindex();
}
inline void AppendEntriesMessage::_internal_set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prevlogindex_ = value;
}
inline void AppendEntriesMessage::set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.AppendEntriesMessage.prevLogIndex)
}

// uint64 prevLogTerm = 4;
inline void AppendEntriesMessage::clear_prevlogterm() {
  prevlogterm_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage::_internal_prevlogterm() const {
  return prevlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage::prevlogterm() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesMessage.prevLogTerm)
  return _internal_prevlogterm();
}
inline void AppendEntriesMessage::_internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prevlogterm_ = value;
}
inline void AppendEntriesMessage::set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.AppendEntriesMessage.prevLogTerm)
}

// uint64 leaderCommit = 5;
inline void AppendEntriesMessage::clear_leadercommit() {
  leadercommit_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage::_internal_leadercommit() const {
  return leadercommit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesMessage::leadercommit() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesMessage.leaderCommit)
  return _internal_leadercommit();
}
inline void AppendEntriesMessage::_internal_set_leadercommit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  leadercommit_ = value;
}
inline void AppendEntriesMessage::set_leadercommit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_leadercommit(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.AppendEntriesMessage.leaderCommit)
}

// repeated .kakakv.net.message.AppendEntriesMessage.Entry entryList = 6;
inline int AppendEntriesMessage::_internal_entrylist_size() const {
  return entrylist_.size();
}
inline int AppendEntriesMessage::entrylist_size() const {
  return _internal_entrylist_size();
}
inline void AppendEntriesMessage::clear_entrylist() {
  entrylist_.Clear();
}
inline ::kakakv::net::message::AppendEntriesMessage_Entry* AppendEntriesMessage::mutable_entrylist(int index) {
  // @@protoc_insertion_point(field_mutable:kakakv.net.message.AppendEntriesMessage.entryList)
  return entrylist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kakakv::net::message::AppendEntriesMessage_Entry >*
AppendEntriesMessage::mutable_entrylist() {
  // @@protoc_insertion_point(field_mutable_list:kakakv.net.message.AppendEntriesMessage.entryList)
  return &entrylist_;
}
inline const ::kakakv::net::message::AppendEntriesMessage_Entry& AppendEntriesMessage::_internal_entrylist(int index) const {
  return entrylist_.Get(index);
}
inline const ::kakakv::net::message::AppendEntriesMessage_Entry& AppendEntriesMessage::entrylist(int index) const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesMessage.entryList)
  return _internal_entrylist(index);
}
inline ::kakakv::net::message::AppendEntriesMessage_Entry* AppendEntriesMessage::_internal_add_entrylist() {
  return entrylist_.Add();
}
inline ::kakakv::net::message::AppendEntriesMessage_Entry* AppendEntriesMessage::add_entrylist() {
  ::kakakv::net::message::AppendEntriesMessage_Entry* _add = _internal_add_entrylist();
  // @@protoc_insertion_point(field_add:kakakv.net.message.AppendEntriesMessage.entryList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kakakv::net::message::AppendEntriesMessage_Entry >&
AppendEntriesMessage::entrylist() const {
  // @@protoc_insertion_point(field_list:kakakv.net.message.AppendEntriesMessage.entryList)
  return entrylist_;
}

// -------------------------------------------------------------------

// AppendEntriesResponseMessage

// uint64 term = 1;
inline void AppendEntriesResponseMessage::clear_term() {
  term_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponseMessage::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponseMessage::term() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesResponseMessage.term)
  return _internal_term();
}
inline void AppendEntriesResponseMessage::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void AppendEntriesResponseMessage::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.AppendEntriesResponseMessage.term)
}

// bool success = 2;
inline void AppendEntriesResponseMessage::clear_success() {
  success_ = false;
}
inline bool AppendEntriesResponseMessage::_internal_success() const {
  return success_;
}
inline bool AppendEntriesResponseMessage::success() const {
  // @@protoc_insertion_point(field_get:kakakv.net.message.AppendEntriesResponseMessage.success)
  return _internal_success();
}
inline void AppendEntriesResponseMessage::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AppendEntriesResponseMessage::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:kakakv.net.message.AppendEntriesResponseMessage.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace net
}  // namespace kakakv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kakakv::net::message::AppendEntriesMessage_Entry_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakakv::net::message::AppendEntriesMessage_Entry_Kind>() {
  return ::kakakv::net::message::AppendEntriesMessage_Entry_Kind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KakaKVRaftMessage_2eproto
